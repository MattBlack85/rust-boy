use crate::registries::Registries;

pub struct Cpu {
    registries: Registries,
}

impl Cpu {
    pub fn new() -> Self {
        Self {
            registries: Registries::new(),
        }
    }

    pub fn execute(&mut self) -> u8 {
        let opcode = 0x0;

        match opcode {
            0x00 => 0,
            0x01 => 0,
            0x02 => 0,
            0x03 => 0,
            0x04 => 0,
            0x05 => 0,
            0x06 => 0,
            0x07 => 0,
            0x08 => 0,
            0x09 => 0,
            0x0A => 0,
            0x0B => 0,
            0x0C => 0,
            0x0D => 0,
            0x0E => 0,
            0x0F => 0,
            0x10 => 1,
            0x11 => 1,
            0x12 => 1,
            0x13 => 1,
            0x14 => 1,
            0x15 => 1,
            0x16 => 1,
            0x17 => 1,
            0x18 => 1,
            0x19 => 1,
            0x1A => 1,
            0x1B => 1,
            0x1C => 1,
            0x1D => 1,
            0x1E => 1,
            0x1F => 1,
            0x20 => 2,
            0x21 => 2,
            0x22 => 2,
            0x23 => 2,
            0x24 => 2,
            0x25 => 2,
            0x26 => 2,
            0x27 => 2,
            0x28 => 2,
            0x29 => 2,
            0x2A => 2,
            0x2B => 2,
            0x2C => 2,
            0x2D => 2,
            0x2E => 2,
            0x2F => 2,
            0x30 => 3,
            0x31 => 3,
            0x32 => 3,
            0x33 => 3,
            0x34 => 3,
            0x35 => 3,
            0x36 => 3,
            0x37 => 3,
            0x38 => 3,
            0x39 => 3,
            0x3A => 3,
            0x3B => 3,
            0x3C => 3,
            0x3D => 3,
            0x3E => 3,
            0x3F => 3,
            0x40 => 4,
            0x41 => 4,
            0x42 => 4,
            0x43 => 4,
            0x44 => 4,
            0x45 => 4,
            0x46 => 4,
            0x47 => 4,
            0x48 => 4,
            0x49 => 4,
            0x4A => 4,
            0x4B => 4,
            0x4C => 4,
            0x4D => 4,
            0x4E => 4,
            0x4F => 4,
            0x50 => 5,
            0x51 => 5,
            0x52 => 5,
            0x53 => 5,
            0x54 => 5,
            0x55 => 5,
            0x56 => 5,
            0x57 => 5,
            0x58 => 5,
            0x59 => 5,
            0x5A => 5,
            0x5B => 5,
            0x5C => 5,
            0x5D => 5,
            0x5E => 5,
            0x5F => 5,
            0x60 => 6,
            0x61 => 6,
            0x62 => 6,
            0x63 => 6,
            0x64 => 6,
            0x65 => 6,
            0x66 => 6,
            0x67 => 6,
            0x68 => 6,
            0x69 => 6,
            0x6A => 6,
            0x6B => 6,
            0x6C => 6,
            0x6D => 6,
            0x6E => 6,
            0x6F => 6,
            0x70 => 7,
            0x71 => 7,
            0x72 => 7,
            0x73 => 7,
            0x74 => 7,
            0x75 => 7,
            0x76 => 7,
            0x77 => 7,
            0x78 => 7,
            0x79 => 7,
            0x7A => 7,
            0x7B => 7,
            0x7C => 7,
            0x7D => 7,
            0x7E => 7,
            0x7F => 7,
            0x80 => 8,
            0x81 => 8,
            0x82 => 8,
            0x83 => 8,
            0x84 => 8,
            0x85 => 8,
            0x86 => 8,
            0x87 => 8,
            0x88 => 8,
            0x89 => 8,
            0x8A => 8,
            0x8B => 8,
            0x8C => 8,
            0x8D => 8,
            0x8E => 8,
            0x8F => 8,
            0x90 => 9,
            0x91 => 9,
            0x92 => 9,
            0x93 => 9,
            0x94 => 9,
            0x95 => 9,
            0x96 => 9,
            0x97 => 9,
            0x98 => 9,
            0x99 => 9,
            0x9A => 9,
            0x9B => 9,
            0x9C => 9,
            0x9D => 9,
            0x9E => 9,
            0x9F => 9,
            0xA0 => 10,
            0xA1 => 10,
            0xA2 => 10,
            0xA3 => 10,
            0xA4 => 10,
            0xA5 => 10,
            0xA6 => 10,
            0xA7 => 10,
            0xA8 => 10,
            0xA9 => 10,
            0xAA => 10,
            0xAB => 10,
            0xAC => 10,
            0xAD => 10,
            0xAE => 10,
            0xAF => 10,
            0xB0 => 10,
            0xB1 => 10,
            0xB2 => 10,
            0xB3 => 10,
            0xB4 => 10,
            0xB5 => 10,
            0xB6 => 10,
            0xB7 => 10,
            0xB8 => 10,
            0xB9 => 10,
            0xBA => 10,
            0xBB => 10,
            0xBC => 10,
            0xBD => 10,
            0xBE => 10,
            0xBF => 10,
            0xC0 => 10,
            0xC1 => 10,
            0xC2 => 10,
            0xC3 => 10,
            0xC4 => 10,
            0xC5 => 10,
            0xC6 => 10,
            0xC7 => 10,
            0xC8 => 10,
            0xC9 => 10,
            0xCA => 10,
            0xCB => 10,
            0xCC => 10,
            0xCD => 10,
            0xCE => 10,
            0xCF => 10,
            0xD0 => 10,
            0xD1 => 10,
            0xD2 => 10,
            0xD3 => 10,
            0xD4 => 10,
            0xD5 => 10,
            0xD6 => 10,
            0xD7 => 10,
            0xD8 => 10,
            0xD9 => 10,
            0xDA => 10,
            0xDB => 10,
            0xDC => 10,
            0xDD => 10,
            0xDE => 10,
            0xDF => 10,
            0xE0 => 10,
            0xE1 => 10,
            0xE2 => 10,
            0xE3 => 10,
            0xE4 => 10,
            0xE5 => 10,
            0xE6 => 10,
            0xE7 => 10,
            0xE8 => 10,
            0xE9 => 10,
            0xEA => 10,
            0xEB => 10,
            0xEC => 10,
            0xED => 10,
            0xEE => 10,
            0xEF => 10,
            0xF0 => 10,
            0xF1 => 10,
            0xF2 => 10,
            0xF3 => 10,
            0xF4 => 10,
            0xF5 => 10,
            0xF6 => 10,
            0xF7 => 10,
            0xF8 => 10,
            0xF9 => 10,
            0xFA => 10,
            0xFB => 10,
            0xFC => 10,
            0xFD => 10,
            0xFE => 10,
            0xFF => 10,
            _ => panic!("instruction not supported"),
        }
    }
}

#[cfg(test)]
mod tests {
    use crate::cpu::Cpu;

    #[test]
    fn check_new_cpu() {
        let mut cpu = Cpu::new();
        cpu.registries.set_a(0x55);

        assert_eq!(cpu.registries.read_a(), 0x55);
        cpu.execute();
    }
}
